// This was generated by codegen script.

const std = @import("std");
const testing = std.testing;

test "percentage_multiple_nested_with_padding_margin_and_percentage_values" {
    const S = @import("stretch");
    var stretch = try S.Stretch.new(std.testing.allocator);
    defer stretch.deinit();

    var node_1_1_1_style = S.Style.default();
    node_1_1_1_style.size.width = S.Dimension{ .Percent = 0.45 };
    node_1_1_1_style.margin.start = S.Dimension{ .Percent = 0.05 };
    node_1_1_1_style.margin.end = S.Dimension{ .Percent = 0.05 };
    node_1_1_1_style.margin.top = S.Dimension{ .Percent = 0.05 };
    node_1_1_1_style.margin.bottom = S.Dimension{ .Percent = 0.05 };
    node_1_1_1_style.padding.start = S.Dimension{ .Points = 3.0 };
    node_1_1_1_style.padding.end = S.Dimension{ .Points = 3.0 };
    node_1_1_1_style.padding.top = S.Dimension{ .Points = 3.0 };
    node_1_1_1_style.padding.bottom = S.Dimension{ .Points = 3.0 };

    const node_1_1_1 = try stretch.new_node(node_1_1_1_style, &[_]S.Node{});

    var node_1_1_style = S.Style.default();
    node_1_1_style.flex_direction = S.FlexDirection.Column;
    node_1_1_style.size.width = S.Dimension{ .Percent = 0.5 };
    node_1_1_style.margin.start = S.Dimension{ .Points = 5.0 };
    node_1_1_style.margin.end = S.Dimension{ .Points = 5.0 };
    node_1_1_style.margin.top = S.Dimension{ .Points = 5.0 };
    node_1_1_style.margin.bottom = S.Dimension{ .Points = 5.0 };
    node_1_1_style.padding.start = S.Dimension{ .Percent = 0.03 };
    node_1_1_style.padding.end = S.Dimension{ .Percent = 0.03 };
    node_1_1_style.padding.top = S.Dimension{ .Percent = 0.03 };
    node_1_1_style.padding.bottom = S.Dimension{ .Percent = 0.03 };

    const node_1_1 = try stretch.new_node(node_1_1_style, &[_]S.Node{node_1_1_1});

    var node_1_style = S.Style.default();
    node_1_style.flex_direction = S.FlexDirection.Column;
    node_1_style.flex_grow = 1.0;
    node_1_style.flex_basis = S.Dimension{ .Percent = 0.1 };
    node_1_style.min_size.width = S.Dimension{ .Percent = 0.6 };
    node_1_style.margin.start = S.Dimension{ .Points = 5.0 };
    node_1_style.margin.end = S.Dimension{ .Points = 5.0 };
    node_1_style.margin.top = S.Dimension{ .Points = 5.0 };
    node_1_style.margin.bottom = S.Dimension{ .Points = 5.0 };
    node_1_style.padding.start = S.Dimension{ .Points = 3.0 };
    node_1_style.padding.end = S.Dimension{ .Points = 3.0 };
    node_1_style.padding.top = S.Dimension{ .Points = 3.0 };
    node_1_style.padding.bottom = S.Dimension{ .Points = 3.0 };

    const node_1 = try stretch.new_node(node_1_style, &[_]S.Node{node_1_1});

    var node_2_style = S.Style.default();
    node_2_style.flex_grow = 4.0;
    node_2_style.flex_basis = S.Dimension{ .Percent = 0.15 };
    node_2_style.min_size.width = S.Dimension{ .Percent = 0.2 };

    const node_2 = try stretch.new_node(node_2_style, &[_]S.Node{});

    var node_style = S.Style.default();
    node_style.flex_direction = S.FlexDirection.Column;
    node_style.size.width = S.Dimension{ .Points = 200.0 };
    node_style.size.height = S.Dimension{ .Points = 200.0 };

    const node = try stretch.new_node(node_style, &[_]S.Node{ node_1, node_2 });

    try stretch.compute_layout(node, S.UndefinedSize());

    const node_layout = try stretch.layout(node);
    try std.testing.expect(node_layout.size.width == 200.0);
    try std.testing.expect(node_layout.size.height == 200.0);
    try std.testing.expect(node_layout.location.x == 0.0);
    try std.testing.expect(node_layout.location.y == 0.0);

    const node_1_layout = try stretch.layout(node_1);
    try std.testing.expect(node_1_layout.size.width == 190.0);
    try std.testing.expect(node_1_layout.size.height == 48.0);
    try std.testing.expect(node_1_layout.location.x == 5.0);
    try std.testing.expect(node_1_layout.location.y == 5.0);

    const node_1_1_layout = try stretch.layout(node_1_1);
    try std.testing.expect(node_1_1_layout.size.width == 92.0);
    try std.testing.expect(node_1_1_layout.size.height == 25.0);
    try std.testing.expect(node_1_1_layout.location.x == 8.0);
    try std.testing.expect(node_1_1_layout.location.y == 8.0);

    const node_1_1_1_layout = try stretch.layout(node_1_1_1);
    try std.testing.expect(node_1_1_1_layout.size.width == 36.0);
    try std.testing.expect(node_1_1_1_layout.size.height == 6.0);
    try std.testing.expect(node_1_1_1_layout.location.x == 10.0);
    try std.testing.expect(node_1_1_1_layout.location.y == 10.0);

    const node_2_layout = try stretch.layout(node_2);
    try std.testing.expect(node_2_layout.size.width == 200.0);
    try std.testing.expect(node_2_layout.size.height == 142.0);
    try std.testing.expect(node_2_layout.location.x == 0.0);
    try std.testing.expect(node_2_layout.location.y == 58.0);
}
